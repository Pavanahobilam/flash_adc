`timescale 1ns / 1ps

// ----------------------
// Comparator (Behavioral)
// ----------------------
module comparator (
    input wire [7:0] vin_p,
    input wire [7:0] vin_n,
    input wire [7:0] vref,
    output wire out
);
    assign out = (vin_p - vin_n) > vref ? 1'b1 : 1'b0;
endmodule

// ----------------------------------
// Thermometer to Binary Encoder (5-bit)
// ----------------------------------
module thermo_to_binary (
    input wire [30:0] thermo_in,
    output reg [4:0] binary_out
);
    integer i;
    always @(*) begin
        binary_out = 5'd0;
        for (i = 0; i < 31; i = i + 1) begin
            if (thermo_in[i] == 1'b1)
                binary_out = binary_out + 1;
        end
    end
endmodule

// ------------------------
// Binary to Gray Encoder
// ------------------------
module binary_to_gray (
    input wire [4:0] bin_in,
    output wire [4:0] gray_out
);
    assign gray_out[4] = bin_in[4];
    assign gray_out[3] = bin_in[4] ^ bin_in[3];
    assign gray_out[2] = bin_in[3] ^ bin_in[2];
    assign gray_out[1] = bin_in[2] ^ bin_in[1];
    assign gray_out[0] = bin_in[1] ^ bin_in[0];
endmodule

// ------------------------------------------
// Top Module: 5-bit Flash ADC with Gray Code
// ------------------------------------------
module flash_adc_5bit (
    input wire [7:0] vin_p,
    input wire [7:0] vin_n,
    output wire [4:0] gray_out
);
    wire [30:0] comparator_out;
    wire [7:0] vref_ladder [0:30];
    wire [4:0] binary_out;

    genvar i;
    generate
        for (i = 0; i < 31; i = i + 1) begin : gen_comparators
            assign vref_ladder[i] = (i+1) * 8;  // Uniform Vref steps
            comparator u_comp (
                .vin_p(vin_p),
                .vin_n(vin_n),
                .vref(vref_ladder[i]),
                .out(comparator_out[i])
            );
        end
    endgenerate

    // Encoder Chain
    thermo_to_binary u_t2b (
        .thermo_in(comparator_out),
        .binary_out(binary_out)
    );

    binary_to_gray u_gray (
        .bin_in(binary_out),
        .gray_out(gray_out)
    );
endmodule

// --------------------
// Testbench
// --------------------
module tb_flash_adc_5bit;

    reg [7:0] vin_p;
    reg [7:0] vin_n;
    wire [4:0] gray_out;

    // Instantiate ADC
    flash_adc_5bit uut (
        .vin_p(vin_p),
        .vin_n(vin_n),
        .gray_out(gray_out)
    );

    initial begin
        $display("Time\tVin+ - Vin-\tGray Output");
        $monitor("%0t\t%d\t\t%05b", $time, vin_p - vin_n, gray_out);

        vin_p = 8'd128; vin_n = 8'd128; #10; // 0
        vin_p = 8'd160; vin_n = 8'd128; #10; // +32
        vin_p = 8'd200; vin_n = 8'd100; #10; // +100
        vin_p = 8'd255; vin_n = 8'd0;   #10; // +255
        vin_p = 8'd100; vin_n = 8'd120; #10; // -20
        vin_p = 8'd50;  vin_n = 8'd200; #10; // -150
        vin_p = 8'd180; vin_n = 8'd100; #10; // +80

        $finish;
    end

endmodule
